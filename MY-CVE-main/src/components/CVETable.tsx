import React, { useRef, useState } from "react";
import {
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  IconButton,
  AlertDialog,
  AlertDialogOverlay,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogBody,
  AlertDialogFooter,
  Button,
  Input,
  InputGroup,
  InputLeftElement,
  Flex,
  Box,
  useColorMode,
} from "@chakra-ui/react";
import { DeleteIcon, EditIcon, SearchIcon } from "@chakra-ui/icons";
import { CVE } from "./AddCVEModal";

interface Props {
  cves: CVE[];
  onEdit: (cve: CVE) => void;
  onDelete: (id: string) => void;
}

const CVETable: React.FC<Props> = ({ cves, onEdit, onDelete }) => {
  const [filterText, setFilterText] = useState("");
  const { colorMode } = useColorMode();
  const [isDeleteAlertOpen, setIsDeleteAlertOpen] = useState(false);
  const [selectedCVEId, setSelectedCVEId] = useState("");
  const leastDestructiveRef = useRef<HTMLButtonElement>(null);

  const filteredCVEs = cves.filter((cve) =>
    Object.values(cve).some((value) =>
      String(value).toLowerCase().includes(filterText.toLowerCase())
    )
  );

  const handleDelete = (id: string) => {
    setSelectedCVEId(id);
    setIsDeleteAlertOpen(true);
  };

  const onCloseDeleteAlert = () => {
    setIsDeleteAlertOpen(false);
  };

  const onDeleteConfirm = () => {
    onDelete(selectedCVEId);
    setIsDeleteAlertOpen(false);
  };

  return (
    <Box
      borderRadius="lg"
      overflow="hidden"
      boxShadow="lg"
      bg={colorMode === "light" ? "white" : "gray.800"}
      color={colorMode === "light" ? "black" : "white"}
    >
      <InputGroup>
        <InputLeftElement
          pointerEvents="none"
          children={<SearchIcon color="gray.300" />}
        />
        <Input
          value={filterText}
          onChange={(e) => setFilterText(e.target.value)}
          placeholder="Search..."
          mb={4}
          variant={colorMode === "light" ? "filled" : "outline"}
        />
      </InputGroup>
      <Table variant="unstyled">
        <Thead
          bg={colorMode === "light" ? "teal.500" : "teal.700"}
          color="white"
        >
          <Tr>
            <Th>CVE-ID</Th>
            <Th>Severity</Th>
            <Th>CVSS</Th>
            <Th>Affected Packages</Th>
            <Th>CWE-ID</Th>
            <Th>Action</Th>
          </Tr>
        </Thead>
        <Tbody>
          {filteredCVEs.map((cve) => (
            <Tr
              key={cve.id}
              _odd={{ bg: colorMode === "light" ? "gray.100" : "gray.700" }}
              _even={{ bg: colorMode === "light" ? "white" : "gray.600" }}
            >
              <Td>{cve.id}</Td>
              <Td>{cve.severity}</Td>
              <Td>{cve.cvss}</Td>
              <Td>{cve.affectedPackages}</Td>
              <Td>{cve.cweId}</Td>
              <Td>
                <Flex justify="space-around">
                  <IconButton
                    aria-label="Edit"
                    icon={<EditIcon />}
                    onClick={() => onEdit(cve)}
                    variant="ghost"
                    colorScheme="teal"
                    rounded="full"
                  />
                  <IconButton
                    aria-label="Delete"
                    icon={<DeleteIcon />}
                    onClick={() => handleDelete(cve.id)}
                    variant="ghost"
                    colorScheme="red"
                    rounded="full"
                  />
                </Flex>
              </Td>
            </Tr>
          ))}
        </Tbody>
      </Table>
      <AlertDialog
        isOpen={isDeleteAlertOpen}
        onClose={onCloseDeleteAlert}
        leastDestructiveRef={leastDestructiveRef}
      >
        <AlertDialogOverlay>
          <AlertDialogContent>
            <AlertDialogHeader fontSize="lg" fontWeight="bold">
              Delete CVE Record
            </AlertDialogHeader>
            <AlertDialogBody>
              Are you sure you want to delete this CVE record?
            </AlertDialogBody>
            <AlertDialogFooter>
              <Button onClick={onCloseDeleteAlert}>Cancel</Button>
              <Button colorScheme="red" onClick={onDeleteConfirm} ml={3}>
                Delete
              </Button>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialogOverlay>
      </AlertDialog>
    </Box>
  );
};

export default CVETable;
